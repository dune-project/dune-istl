[sequential]
N = 10

[overlapping]
N = 10

[nonoverlapping]
N = 10

# [sequential.CGWithSSOR]
# type = cgsolver
# verbose = 1
# preconditioner.type = seqssor

[sequential.UMFPack]
type = umfpack
verbose = 1

[sequential.SuperLU]
type = superlu
verbose = 1

# [overlapping.ParallelCGWithSSOR]
# type = cgsolver
# verbose = 1
# verboserank = 0
# preconditioner.type = parssor

# [overlapping.ParallelBlockSSOR]
# type = cgsolver
# verbose = 1
# verboserank = 0
# preconditioner.type = blockpreconditioner
# preconditioner.preconditioner.type = seqssor

# [overlapping.OverlappingSchwarzWithDirectLocalSolver]
# type = cgsolver
# verbose = 1
# verboserank = 0
# preconditioner.type = blockpreconditioner
# preconditioner.preconditioner.type = inverseoperator2preconditioner
# preconditioner.preconditioner.solver.type = umfpack
# preconditioner.preconditioner.solver.verbose = 0

# [sequential.CG_AMG]
# type = cgsolver
# verbose = 1
# preconditioner.type = amg

# [overlapping.Overlapping_CG_AMG]
# type = cgsolver
# verbose = 1
# preconditioner.type = amg

# [nonoverlapping.Nonoverlapping_CG_AMG]
# type = cgsolver
# verbose = 1
# preconditioner.type = amg

# [nonoverlapping.Nonoverlapping_CG_BlockPreconditioner]
# type = cgsolver
# verbose = 1
# preconditioner.type = nonoverlappingblockpreconditioner
# preconditioner.preconditioner.type = seqssor

# [sequential.BICGSTAB_ILU]
# type = bicgstabsolver
# verbose = 1
# preconditioner.type = seqilu
# preconditioner.iterations = 0

# [sequential.BiCGSTAB_FastAMG]
# type = bicgstabsolver
# verbose = 1
# preconditioner.type = fastamg

# [sequential.BiCGSTAB_KAMG]
# type = bicgstabsolver
# verbose = 1
# preconditioner.type = kamg